using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;
using DevExpress.DocumentServices.ServiceModel.DataContracts;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using DevExpress.ClipboardSource.SpreadsheetML;

namespace TMS.PL
{
    public partial class FRM_Task : DevExpress.XtraEditors.XtraUserControl
    {
        DBTMSEntities dBTMSEntities;
        TB_Tasks Tasks;
        TaskAdd taskAdd;
        public FRM_Task()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext

            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            TMS.DBTMSEntities dbContext = new TMS.DBTMSEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.TB_Tasks.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.TB_Tasks.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
        }

        private void btnupdate_Click(object sender, EventArgs e)
        {
            UserDataUpdate();
        }
        public void UserDataUpdate()
        {
            try
            {
                Tasks = new TB_Tasks();
                dBTMSEntities = new DBTMSEntities();
                gridControl1.DataSource = dBTMSEntities.TB_Tasks.ToList();
            }
            catch (Exception ex)
            {
                MessageBox.Show("خطا في اتصال قاعدة البيانات", "خطا", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void FRM_USER_Load(object sender, EventArgs e)
        {
            UserDataUpdate();
        }

        private void btnadd_Click(object sender, EventArgs e)
        {
            taskAdd = new TaskAdd(this);
            taskAdd.id = 0;
            taskAdd.Show();

        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void btnedit_Click(object sender, EventArgs e)
        {
            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            TB_Tasks task1 = new TB_Tasks();
            task1 = dBTMSEntities.TB_Tasks.Where(x => x.ID == id).FirstOrDefault();
            taskAdd = new TaskAdd(this);
            taskAdd.id = task1.ID;
            taskAdd.txttaskName.Text = task1.Task_Name;
            taskAdd.comboAdmin.Text = task1.Task_Admin;
            taskAdd.comboUser.Text = task1.Task_User;
            taskAdd.comboProject.Text = task1.Task_Project;
            taskAdd.txtTaskDes.Text = task1.Task_Des;
            taskAdd.TaskStart.Value = task1.Task_Start.Value;
            taskAdd.TaskEnd.Value = task1.Task_End.Value;
            taskAdd.txtTaskDuration.Text = task1.Task_Duration.ToString();
            taskAdd.TaskState = task1.Task_State;
            taskAdd.btnSave.Text = "تعديل";
            taskAdd.Show();



        }

        private void btndelete_Click(object sender, EventArgs e)
        {
            var result = MessageBox.Show("هل انت متاكد", "تحذير", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
                if (id == 0)
                {
                    MessageBox.Show("لايوجد بيانات لحذفها");

                }
                else
                {
                    TB_Tasks tasks = new TB_Tasks();
                    tasks = dBTMSEntities.TB_Tasks.Where(x => x.ID == id).FirstOrDefault();
                    dBTMSEntities.Entry(tasks).State = EntityState.Deleted;
                    dBTMSEntities.SaveChanges();

                    MessageBox.Show("تم الحذف بنجاح");

                    UserDataUpdate();
                }
            }

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
            if (id == 0)
            {
                MessageBox.Show("لايوجد بيانات ");

            }
            else
            {
                TB_Tasks tasks = new TB_Tasks();
                tasks = dBTMSEntities.TB_Tasks.Where(x => x.ID == id).FirstOrDefault();
                tasks.Task_State = "مكتمل";
                dBTMSEntities.Entry(tasks).State = EntityState.Modified;
                dBTMSEntities.SaveChanges();


                EditNote();
                UserDataUpdate();
                
            }
        }
        private void EditNote()
        {

            try
            {
                dBTMSEntities = new DBTMSEntities();
                int id = Convert.ToInt32(gridView1.GetFocusedRowCellValue("ID"));
                TB_Tasks Task = dBTMSEntities.TB_Tasks.Where(x => x.ID == id).FirstOrDefault();


                TB_Note Note = new TB_Note()
                {

                    Note_Manger = Task.Task_Admin,
                    Note_User = Task.Task_User,
                    NoteDes = "  بواسطة المستخدم" + Task.Task_User + Task.Task_Name + " تمت اكمال الفعالية "

                };



                dBTMSEntities.Entry(Note).State = System.Data.Entity.EntityState.Added;
                dBTMSEntities.SaveChanges();

                MessageBox.Show("تم التعديل بنجاح");





            }
            catch
            {

            }
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            TB_Tasks tasks = new TB_Tasks();
            var idtasks = dBTMSEntities.TB_Tasks.Select(x => x.ID).ToArray();
            for(int i = 0; i < idtasks.Length; i++)
            {
                var id = idtasks[i];
                tasks = dBTMSEntities.TB_Tasks.Where(x => x.ID == id).FirstOrDefault();
                var start = DateTime.Now.Date;
                var end = tasks.Task_End;
                var date = (end - start).Value.Days;
                tasks.Task_Duration = date;
                if (date==0 && tasks.Task_State != "مكتمل")
                {
                    tasks.Task_State = "اليوم";
                    TB_Note note = new TB_Note();
                    note.Note_Manger = tasks.Task_Admin;
                    note.Note_User = tasks.Task_User;

                    note.NoteDes = "الفعالية" + tasks.Task_Name + " تنتهي اليوم";
                    dBTMSEntities.Entry(note).State = EntityState.Added;
                    dBTMSEntities.SaveChanges();
                }
                else if(date == 1 && tasks.Task_State != "مكتمل")
                {
                    tasks.Task_State = "غدا";

                }
                else if (date <0 && tasks.Task_State != "مكتمل")
                {
                    tasks.Task_State = "غير مكتمل";

                }
                else if (date > 1 && tasks.Task_State != "مكتمل")
                {
                    tasks.Task_State = "باقي " + date.ToString() + "ايام";

                }
                dBTMSEntities.Entry(tasks).State = EntityState.Modified;
                dBTMSEntities.SaveChanges();
            }
            UserDataUpdate();

        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            try
            {
                Tasks = new TB_Tasks();
                dBTMSEntities = new DBTMSEntities();
                gridControl1.DataSource = dBTMSEntities.TB_Tasks.ToList();
            }
            catch (Exception ex)
            {
            }

        }
    }
}
